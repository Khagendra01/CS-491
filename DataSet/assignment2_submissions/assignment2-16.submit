{
  "course": {
    "institution": "Caldwell University",
    "name": "CS 196 - Computer Programming II",
    "url": "https://caldwell.blackboard.com/",
    "instructor": "Dr. V"
  },
  "name": "Assignment 2 - Dunder Methods",
  "instructions": {
    "start": "Assignment instructions will be available under README.md below *after* you initialized the assignment.",
    "work": "<li>Click the README.md below for assignment instructions.</li><li>Click the assignment2.ipynb file to open and edit it.</li><li>Add your code to assignment2.ipynb, run all cells, and save before submitting your assignment.</li>",
    "submit": "Upload the submission file on blackboard (the submission file will have the <b>.submit</b> extension)."
  },
  "due": "2024-02-12",
  "mustBeNew": true,
  "files": [
    {
      "name": "assignment2.ipynb",
      "tracked": true,
      "edited": "-"
    },
    {
      "name": "README.md",
      "content": "Click on the file **assignment2.ipynb** in this assignment.  \nThis is a jupyter notebook where you will add your code.\n\n**DO NOT INCLUDE YOUR NAME ANYWHERE IN THIS FILE OR IN FILENAME**\n\nIn this notebook you should have the following:\n\n1. Create some class that includes the following\n    - `__init__` method\n    - `__str__` method\n    - `__repr__` method\n    - at least 8 more dunder methods that map onto common functions (e.g., len, bool, reverse) and operators (e.g., del, in, +, -, +=, |, &)\n    - at least 2 dunder methods for attribute and/or item access or deletion\n\n2. Create a few objects of this class\n\n3. Show off all implemented functionality\n   \n4. Make sure you have docstrings, comments and/or markdown where appropriate\n\n5. Execute all cells in this notebook, save.\n\n6. Click the **Create Assignment Submission File** button in this assignment, save the submission file (it will have `.submit` as the file extension), and upload this submission file on blackboard.\n\n\n**DO NOT HAVE THE SAME CLASS DEFINITIONS AS YOUR CLASSMATES**:\n\n- Even if you are working together with your peers, make sure that you implement different sets of dunder methods and that they do different things.\n\nCode will be evaluated for:\n1. code is written and works as intended (e.g., correct calls, correct output, no errors)\n2. clean/efficient code (e.g., no unnecessary code)\n3. naming conventions (e.g., class names are UpperCamelCase)\n4. readability (e.g., meaningful names, separation of code into separate cells)\n5. documentation (e.g., docstrings, comments, argument type specification)\n* click \"View Rubric\" on blackboard under this assignment for more details\n\n"
    }
  ],
  "modified": "2024-02-12 17:32",
  "currentlyOpen": true,
  "folder": "c:\\Anuj Khadka\\Semester 2\\CS 196 - Computer Programming II\\Assignment 2 - Dunder Methods-20240212",
  "startDate": "2024-02-12 17:32",
  "submission": {
    "agent": {
      "app": "vscode",
      "extension": "LectureDot.lecture-assign",
      "version": "0.0.13"
    },
    "date": "2024-02-12 17:32",
    "files": [
      {
        "name": "assignment2.ipynb",
        "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"class SupClass:\\n\",\n    \"    \\n\",\n    \"    # Construct the necessary attributes for the class \\n\",\n    \"    def __init__(self, par1, par2):\\n\",\n    \"        '''\\n\",\n    \"        Initialize the CustomClass with a data attribute.\\n\",\n    \"\\n\",\n    \"        Parameters:\\n\",\n    \"\\n\",\n    \"                    par1 (any): first parameter\\n\",\n    \"                    par2 (any): second parameter\\n\",\n    \"        '''\\n\",\n    \"        self.par1 = par1\\n\",\n    \"        self.par2 = par2\\n\",\n    \"    \\n\",\n    \"    def __str__(self):\\n\",\n    \"        '''\\n\",\n    \"        Return a string representation of the object.\\n\",\n    \"        '''\\n\",\n    \"        print(\\\"This is a custom class to alter built-in functions\\\")\\n\",\n    \"\\n\",\n    \"    def __repr__(self):\\n\",\n    \"        '''\\n\",\n    \"        Return a string representation of the object.\\n\",\n    \"        '''\\n\",\n    \"        return self.__str__()\\n\",\n    \"    \\n\",\n    \"    def __add__(self, val):\\n\",\n    \"        '''\\n\",\n    \"        Concatenate the data attribute with another object's data attribute.\\n\",\n    \"        '''\\n\",\n    \"        return (self.par1 + val.par1, self.par2 + val.par2)\\n\",\n    \"    \\n\",\n    \"    def __eq__(self, val):\\n\",\n    \"        '''\\n\",\n    \"        Return True if a specific value is equal to the second attribute\\n\",\n    \"        '''\\n\",\n    \"        return self.par2 == val\\n\",\n    \"    \\n\",\n    \"    def __lt__(self, val):\\n\",\n    \"        '''\\n\",\n    \"        Return True if second attribute is less than the specific value\\n\",\n    \"        '''\\n\",\n    \"        return self.par2 < val\\n\",\n    \"    \\n\",\n    \"    def __len__(self):\\n\",\n    \"        '''\\n\",\n    \"        Return the length of the second attribute.\\n\",\n    \"        '''\\n\",\n    \"        return len(self.par2)\\n\",\n    \"\\n\",\n    \"    def __contains__(self, val):\\n\",\n    \"        '''\\n\",\n    \"        Check if the given item is present in the first attribute.\\n\",\n    \"        '''\\n\",\n    \"        return val in self.par1\\n\",\n    \"    \\n\",\n    \"    def __bool__(self):\\n\",\n    \"        '''\\n\",\n    \"        Return True for any condition\\n\",\n    \"        '''\\n\",\n    \"        return True\\n\",\n    \"    \\n\",\n    \"    def product(self):\\n\",\n    \"        '''\\n\",\n    \"        Calculate the product of two attributes.\\n\",\n    \"        '''\\n\",\n    \"        return self.par1 * self.par2\\n\",\n    \"    \\n\",\n    \"    def __del__(self):\\n\",\n    \"        '''\\n\",\n    \"        Delete the specific object.\\n\",\n    \"        '''\\n\",\n    \"        del self.par1\\n\",\n    \"        del self.par2\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# instances with integer values \\n\",\n    \"ints1 = SupClass(5,3)\\n\",\n    \"ints2 = SupClass(2,3)\\n\",\n    \"\\n\",\n    \"# instances with string values \\n\",\n    \"strs1 = SupClass(\\\"anuj\\\", \\\"khadka\\\")\\n\",\n    \"\\n\",\n    \"# instances with array values \\n\",\n    \"arr = SupClass([1,2,3,4], [2,4,6,8])\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"This is a custom class to alter built-in functions\\n\",\n      \"(7, 6)\\n\",\n      \"False\\n\",\n      \"False\\n\",\n      \"6\\n\",\n      \"True\\n\",\n      \"True\\n\",\n      \"15\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# print string representation of an object \\n\",\n    \"ints1.__repr__()\\n\",\n    \"\\n\",\n    \"# Addition \\n\",\n    \"print(ints1 + ints2)\\n\",\n    \"\\n\",\n    \"# Comparison for equal values\\n\",\n    \"print(ints1 == '3')\\n\",\n    \"\\n\",\n    \"# Perform less than operation\\n\",\n    \"print(ints1 < 0)\\n\",\n    \"\\n\",\n    \"# Length of the string\\n\",\n    \"print(len(strs1))\\n\",\n    \"\\n\",\n    \"# Given value contains in the object\\n\",\n    \"print('a' in strs1)\\n\",\n    \"\\n\",\n    \"# Boolean Value\\n\",\n    \"print(bool(arr))\\n\",\n    \"\\n\",\n    \"# Calculate Product\\n\",\n    \"print(ints1.product())\\n\",\n    \"\\n\",\n    \"# Delete object\\n\",\n    \"del arr\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
      }
    ],
    "logs": [
      {
        "name": "assignment2.ipynb",
        "log": "{\"t\":1707777148612,\"u\":0,\"v\":\"\",\"_courseId\":\"CS 196 - Computer Programming II\",\"_assignmentId\":\"Assignment 2 - Dunder Methods\"}\n{\"u\":0,\"v\":\"class SupClass:\\n    \\n    # Construct the necessary attributes for the class \\n    def __init__(self, par1, par2):\\n        '''\\n        Initialize the CustomClass with a data attribute.\\n\\n        Parameters:\\n\\n                    par1 (any): first parameter\\n                    par2 (any): second parameter\\n        '''\\n        self.par1 = par1\\n        self.par2 = par2\\n    \\n    def __str__(self):\\n        '''\\n        Return a string representation of the object.\\n        '''\\n        print(\\\"This is a custom class to alter built-in functions\\\")\\n\\n    def __repr__(self):\\n        '''\\n        Return a string representation of the object.\\n        '''\\n        return self.__str__()\\n    \\n    def __add__(self, val):\\n        '''\\n        Concatenate the data attribute with another object's data attribute.\\n        '''\\n        return (self.par1 + val.par1, self.par2 + val.par2)\\n    \\n    def __eq__(self, val):\\n        '''\\n        Return True if a specific value is equal to the second attribute\\n        '''\\n        return self.par2 == val\\n    \\n    def __lt__(self, val):\\n        '''\\n        Return True if second attribute is less than the specific value\\n        '''\\n        return self.par2 < val\\n    \\n    def __len__(self):\\n        '''\\n        Return the length of the second attribute.\\n        '''\\n        return len(self.par2)\\n\\n    def __contains__(self, val):\\n        '''\\n        Check if the given item is present in the first attribute.\\n        '''\\n        return val in self.par1\\n    \\n    def __bool__(self):\\n        '''\\n        Return True for any condition\\n        '''\\n        return True\\n    \\n    def product(self):\\n        '''\\n        Calculate the product of two attributes.\\n        '''\\n        return self.par1 * self.par2\\n    \\n    def __del__(self):\\n        '''\\n        Delete the specific object.\\n        '''\\n        del self.par1\\n        del self.par2\\n\",\"t\":1707777157727}\n{\"u\":1,\"v\":\"# instances with integer values \\nints1 = SupClass(5,3)\\nints2 = SupClass(2,3)\\n\\n# instances with string values \\nstrs1 = SupClass(\\\"anuj\\\", \\\"khadka\\\")\\n\\n# instances with array values \\narr = SupClass([1,2,3,4], [2,4,6,8])\\n\",\"t\":1707777157728}\n{\"u\":2,\"v\":\"# print string representation of an object \\nints1.__repr__()\\n\\n# Addition \\nprint(ints1 + ints2)\\n\\n# Comparison for equal values\\nprint(ints1 == '3')\\n\\n# Perform less than operation\\nprint(ints1 < 0)\\n\\n# Length of the string\\nprint(len(strs1))\\n\\n# Given value contains in the object\\nprint('a' in strs1)\\n\\n# Boolean Value\\nprint(bool(arr))\\n\\n# Calculate Product\\nprint(ints1.product())\\n\\n# Delete object\\ndel arr\",\"t\":1707777157728}\n{\"|\":0,\"_ls\":112,\"_cs\":2466,\"_l\":0,\"_c\":0,\"u\":0,\"t\":1707777160892}\n{\"|\":204,\"_ls\":112,\"_cs\":2466,\"_l\":8,\"_c\":204,\"u\":0,\"t\":1707777161398}\n{\"|\":0,\"_ls\":112,\"_cs\":2466,\"_l\":76,\"_c\":1856,\"u\":1,\"t\":1707777163342}\n{\"|\":109,\"_ls\":112,\"_cs\":2466,\"_l\":80,\"_c\":1965,\"u\":1,\"t\":1707777164711}\n{\"|\":0,\"_ls\":112,\"_cs\":2466,\"_l\":86,\"_c\":2070,\"u\":2,\"t\":1707777167518}\n{\"|\":388,\"_ls\":112,\"_cs\":2466,\"_l\":110,\"_c\":2458,\"u\":2,\"t\":1707777168697}\n{\"u\":3,\"v\":\"\",\"t\":1707777170218}\n{\"|\":0,\"_ls\":113,\"_cs\":2466,\"_l\":112,\"_c\":2466,\"u\":3,\"t\":1707777170236}\n"
      }
    ]
  }
}