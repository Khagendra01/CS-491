{
  "course": {
    "institution": "Caldwell University",
    "name": "CS 196 - Computer Programming II",
    "url": "https://caldwell.blackboard.com/",
    "instructor": "Dr. V"
  },
  "name": "Assignment 2 - Dunder Methods",
  "instructions": {
    "start": "Assignment instructions will be available under README.md below *after* you initialized the assignment.",
    "work": "<li>Click the README.md below for assignment instructions.</li><li>Click the assignment2.ipynb file to open and edit it.</li><li>Add your code to assignment2.ipynb, run all cells, and save before submitting your assignment.</li>",
    "submit": "Upload the submission file on blackboard (the submission file will have the <b>.submit</b> extension)."
  },
  "due": "2024-02-12",
  "mustBeNew": true,
  "files": [
    {
      "name": "assignment2.ipynb",
      "tracked": true,
      "edited": "2024-02-12 19:47",
      "checksums": {
        "ok": 3,
        "unhashed": 0,
        "last": "2024-02-12 19:47"
      }
    },
    {
      "name": "README.md",
      "content": "Click on the file **assignment2.ipynb** in this assignment.  \nThis is a jupyter notebook where you will add your code.\n\n**DO NOT INCLUDE YOUR NAME ANYWHERE IN THIS FILE OR IN FILENAME**\n\nIn this notebook you should have the following:\n\n1. Create some class that includes the following\n    - `__init__` method\n    - `__str__` method\n    - `__repr__` method\n    - at least 8 more dunder methods that map onto common functions (e.g., len, bool, reverse) and operators (e.g., del, in, +, -, +=, |, &)\n    - at least 2 dunder methods for attribute and/or item access or deletion\n\n2. Create a few objects of this class\n\n3. Show off all implemented functionality\n   \n4. Make sure you have docstrings, comments and/or markdown where appropriate\n\n5. Execute all cells in this notebook, save.\n\n6. Click the **Create Assignment Submission File** button in this assignment, save the submission file (it will have `.submit` as the file extension), and upload this submission file on blackboard.\n\n\n**DO NOT HAVE THE SAME CLASS DEFINITIONS AS YOUR CLASSMATES**:\n\n- Even if you are working together with your peers, make sure that you implement different sets of dunder methods and that they do different things.\n\nCode will be evaluated for:\n1. code is written and works as intended (e.g., correct calls, correct output, no errors)\n2. clean/efficient code (e.g., no unnecessary code)\n3. naming conventions (e.g., class names are UpperCamelCase)\n4. readability (e.g., meaningful names, separation of code into separate cells)\n5. documentation (e.g., docstrings, comments, argument type specification)\n* click \"View Rubric\" on blackboard under this assignment for more details\n\n"
    }
  ],
  "modified": "2024-02-12 19:47",
  "currentlyOpen": true,
  "folder": "c:\\Users\\khare\\Documents\\CS 196 - Computer Programming II\\Assignment 2 - Dunder Methods-20240212",
  "startDate": "2024-02-12 14:50",
  "submission": {
    "agent": {
      "app": "vscode",
      "extension": "LectureDot.lecture-assign",
      "version": "0.0.16"
    },
    "date": "2024-02-12 19:47",
    "files": [
      {
        "name": "assignment2.ipynb",
        "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"#Creating a library about the book in it's inventory\\n\",\n    \"\\n\",\n    \"class Library:\\n\",\n    \"    '''Represents the class library with books in its inventory'''\\n\",\n    \"    def __init__(self, name, books=[]):       #initializing the class Library\\n\",\n    \"        self.name = name\\n\",\n    \"        self.books = books\\n\",\n    \"\\n\",\n    \"    def __str__(self):\\n\",\n    \"        '''Gives human-readable information in string representations of an object'''\\n\",\n    \"        return f\\\"{self.name} library has {self.books} in the inventory\\\"\\n\",\n    \"\\n\",\n    \"    def __repr__(self):\\n\",\n    \"        '''Returns more information or representations of an object'''\\n\",\n    \"        return f\\\"Library inventory of {self.name} contains {self.books}\\\"\\n\",\n    \"\\n\",\n    \"    def __len__(self):\\n\",\n    \"        '''Returns the length of the list created for an object'''\\n\",\n    \"        return len(self.books)        #using len function to get the length of the list\\n\",\n    \"\\n\",\n    \"    def __bool__(self):\\n\",\n    \"        '''Returns the boolean value of a library checking whether it has books or not'''\\n\",\n    \"        return bool(self.books)        #using bool function to get the result in Boolean\\n\",\n    \"\\n\",\n    \"    def __reversed__(self):\\n\",\n    \"        '''Returns the reversed text of items from the list'''\\n\",\n    \"        return reversed(self.books)\\n\",\n    \"\\n\",\n    \"    def __delitem__(self, index):\\n\",\n    \"        '''Deletes the book from the inventory with the index provided '''\\n\",\n    \"        del self.books[index]\\n\",\n    \"\\n\",\n    \"    def __contains__(self, book):\\n\",\n    \"        '''Checks whether that specific library contains that specific book or not'''\\n\",\n    \"        return book in self.books\\n\",\n    \"\\n\",\n    \"    def __add__(self, otherLibrary):\\n\",\n    \"        '''Adds books of two libraries to create a new list'''\\n\",\n    \"        if isinstance(otherLibrary, Library):\\n\",\n    \"            return Library(self.name, self.books + otherLibrary.books)\\n\",\n    \"\\n\",\n    \"    def __sub__(self, otherLibrary):\\n\",\n    \"        '''Subtracts the common books from two different libraries'''\\n\",\n    \"        if isinstance(otherLibrary, Library):\\n\",\n    \"            return Library(self.name, [book for book in self.books if book not in otherLibrary.books])\\n\",\n    \"\\n\",\n    \"    def __iadd__(self, otherLibrary):\\n\",\n    \"        '''Using += operator to make it easier for addition of libraries inventory'''\\n\",\n    \"        if isinstance(otherLibrary, Library):    #checks if otherLibrary is an instance of the Library class\\n\",\n    \"            self.books += otherLibrary.books\\n\",\n    \"        return self\\n\",\n    \"\\n\",\n    \"    def __or__(self, other):\\n\",\n    \"        '''This method creates a new Library instance with the same name as the current instance (self.name) and computes the union of the books'''\\n\",\n    \"        if isinstance(other, Library):\\n\",\n    \"            return Library(self.name, list(set(self.books) | set(other.books)))    #using the union operator \\\"|\\\"  \\n\",\n    \"\\n\",\n    \"    def __and__(self, other):\\n\",\n    \"        '''This method creates a new Library instance with the same name as the current instance (self.name) and computes the intersections(common) of the books and converts them to a new list'''\\n\",\n    \"        if isinstance(other, Library):\\n\",\n    \"            return Library(self.name, list(set(self.books) & set(other.books)))\\n\",\n    \"\\n\",\n    \"    def __getitem__(self, index):\\n\",\n    \"        '''Allows the user to get the books from the library inventory using index operator [] '''\\n\",\n    \"        return self.books[index]\\n\",\n    \"\\n\",\n    \"    def __setitem__(self, index, value):\\n\",\n    \"        '''Assigns a new value to a book with the help of index'''\\n\",\n    \"        self.books[index] = value\\n\",\n    \"\\n\",\n    \"    def __delattr__(self, name):\\n\",\n    \"        '''Deletes the named attribute from the object'''\\n\",\n    \"        if name == \\\"name\\\":\\n\",\n    \"            del self.name\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Creating objects\\n\",\n    \"library1 = Library(\\\"Caldwell Public  Library\\\", [\\\"The Great Gatsby\\\", \\\"Atomic Habits\\\", \\\"The Bible\\\", \\\"Mrs. Spring Fragrance\\\", \\\"Computers in Modern Life\\\"])\\n\",\n    \"library2 = Library(\\\"Jennings Library\\\", [\\\"Cultures of America\\\", \\\"Proability and Stats I\\\", \\\"Computers in Modern Life\\\", \\\"Human and Child Psychology\\\", \\\"The Bible\\\"])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Caldwell Public  Library library has ['The Great Gatsby', 'Atomic Habits', 'The Bible', 'Mrs. Spring Fragrance', 'Computers in Modern Life'] in the inventory\\n\",\n      \"Library inventory of Caldwell Public  Library contains ['The Great Gatsby', 'Atomic Habits', 'The Bible', 'Mrs. Spring Fragrance', 'Computers in Modern Life']\\n\",\n      \"5\\n\",\n      \"True\\n\",\n      \"True\\n\",\n      \"Caldwell Public  Library library has ['The Great Gatsby', 'Atomic Habits', 'The Bible', 'Mrs. Spring Fragrance', 'Computers in Modern Life', 'Cultures of America', 'Proability and Stats I', 'Computers in Modern Life', 'Human and Child Psychology', 'The Bible'] in the inventory\\n\",\n      \"Jennings Library library has ['Cultures of America', 'Proability and Stats I', 'Human and Child Psychology'] in the inventory\\n\",\n      \"Caldwell Public  Library library has ['The Great Gatsby', 'Atomic Habits', 'The Bible', 'Mrs. Spring Fragrance', 'Computers in Modern Life', 'Cultures of America', 'Proability and Stats I', 'Computers in Modern Life', 'Human and Child Psychology', 'The Bible'] in the inventory\\n\",\n      \"Caldwell Public  Library library has ['Mrs. Spring Fragrance', 'Cultures of America', 'The Great Gatsby', 'Computers in Modern Life', 'Human and Child Psychology', 'Atomic Habits', 'The Bible', 'Proability and Stats I'] in the inventory\\n\",\n      \"Caldwell Public  Library library has ['The Bible', 'Computers in Modern Life', 'Human and Child Psychology', 'Cultures of America', 'Proability and Stats I'] in the inventory\\n\",\n      \"Atomic Habits\\n\",\n      \"UpdatedBook\\n\",\n      \"Caldwell Public  Library library has ['The Great Gatsby', 'UpdatedBook', 'Mrs. Spring Fragrance', 'Computers in Modern Life', 'Cultures of America', 'Proability and Stats I', 'Computers in Modern Life', 'Human and Child Psychology', 'The Bible'] in the inventory\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Showcasing functionality for each methods created for the Class Library\\n\",\n    \"print(library1)                         # __str__\\n\",\n    \"print(repr(library1))                   # __repr__\\n\",\n    \"print(len(library1))                    # __len__\\n\",\n    \"print(bool(library1))                   # __bool__\\n\",\n    \"\\n\",\n    \"print(\\\"Atomic Habits\\\" in library1)      # __contains__\\n\",\n    \"print(library1 + library2)              # __add__\\n\",\n    \"print(library2 - library1)              # __sub__\\n\",\n    \"library1 += library2                    # __iadd__\\n\",\n    \"print(library1)\\n\",\n    \"\\n\",\n    \"print(library1 | library2)              # __or__\\n\",\n    \"print(library1 & library2)              # __and__\\n\",\n    \"\\n\",\n    \"print(library1[1])                      # __getitem__\\n\",\n    \"library1[1] = \\\"UpdatedBook\\\"             # __setitem__\\n\",\n    \"print(library1[1])\\n\",\n    \"\\n\",\n    \"del library1[2]                         # __delitem__\\n\",\n    \"print(library1)\\n\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
      }
    ],
    "logs": [
      {
        "name": "assignment2.ipynb",
        "log": "{\"t\":1707767436637,\"u\":0,\"v\":\"\",\"_courseId\":\"CS 196 - Computer Programming II\",\"_assignmentId\":\"Assignment 2 - Dunder Methods\"}\n{\"|\":0,\"_ls\":1,\"_cs\":0,\"_l\":0,\"_c\":0,\"u\":0,\"t\":1707767441175}\n{\"|\":0,\"_ls\":1,\"_cs\":0,\"_l\":0,\"_c\":0,\"u\":0,\"t\":1707767441222}\n{\"|\":0,\"_ls\":1,\"_cs\":0,\"_l\":0,\"_c\":0,\"u\":0,\"t\":1707767489884}\n{\"|\":0,\"_ls\":1,\"_cs\":0,\"_l\":0,\"_c\":0,\"u\":0,\"t\":1707785103933}\n{\"|\":0,\"_ls\":1,\"_cs\":0,\"_l\":0,\"_c\":0,\"u\":0,\"t\":1707785145478}\n{\"u\":0,\"^\":[0,0,\"#Creating a library about the book in it's inventory\\r\\n\\r\\nclass Library:\\r\\n    '''Represents the class library with books in its inventory'''\\r\\n    def __init__(self, name, books=[]):       #initializing the class Library\\r\\n        self.name = name\\r\\n        self.books = books\\r\\n\\r\\n    def __str__(self):\\r\\n        '''Gives human-readable information in string representations of an object'''\\r\\n        return f\\\"{self.name} library has {self.books} in the inventory\\\"\\r\\n\\r\\n    def __repr__(self):\\r\\n        '''Returns more information or representations of an object'''\\r\\n        return f\\\"Library inventory of {self.name} contains {self.books}\\\"\\r\\n\\r\\n    def __len__(self):\\r\\n        '''Returns the length of the list created for an object'''\\r\\n        return len(self.books)        #using len function to get the length of the list\\r\\n\\r\\n    def __bool__(self):\\r\\n        '''Returns the boolean value of a library checking whether it has books or not'''\\r\\n        return bool(self.books)        #using bool function to get the result in Boolean\\r\\n\\r\\n    def __reversed__(self):\\r\\n        '''Returns the reversed text of items from the list'''\\r\\n        return reversed(self.books)\\r\\n\\r\\n    def __delitem__(self, index):\\r\\n        '''Deletes the book from the inventory with the index provided '''\\r\\n        del self.books[index]\\r\\n\\r\\n    def __contains__(self, book):\\r\\n        '''Checks whether that specific library contains that specific book or not'''\\r\\n        return book in self.books\\r\\n\\r\\n    def __add__(self, otherLibrary):\\r\\n        '''Adds books of two libraries to create a new list'''\\r\\n        if isinstance(otherLibrary, Library):\\r\\n            return Library(self.name, self.books + otherLibrary.books)\\r\\n\\r\\n    def __sub__(self, otherLibrary):\\r\\n        '''Subtracts the common books from two different libraries'''\\r\\n        if isinstance(otherLibrary, Library):\\r\\n            return Library(self.name, [book for book in self.books if book not in otherLibrary.books])\\r\\n\\r\\n    def __iadd__(self, otherLibrary):\\r\\n        '''Using += operator to make it easier for addition of libraries inventory'''\\r\\n        if isinstance(otherLibrary, Library):    #checks if otherLibrary is an instance of the Library class\\r\\n            self.books += otherLibrary.books\\r\\n        return self\\r\\n\\r\\n    def __or__(self, other):\\r\\n        '''This method creates a new Library instance with the same name as the current instance (self.name) and computes the union of the books'''\\r\\n        if isinstance(other, Library):\\r\\n            return Library(self.name, list(set(self.books) | set(other.books)))    #using the union operator \\\"|\\\"  \\r\\n\\r\\n    def __and__(self, other):\\r\\n        '''This method creates a new Library instance with the same name as the current instance (self.name) and computes the intersections(common) of the books and converts them to a new list'''\\r\\n        if isinstance(other, Library):\\r\\n            return Library(self.name, list(set(self.books) & set(other.books)))\\r\\n\\r\\n    def __getitem__(self, index):\\r\\n        '''Allows the user to get the books from the library inventory using index operator [] '''\\r\\n        return self.books[index]\\r\\n\\r\\n    def __setitem__(self, index, value):\\r\\n        '''Assigns a new value to a book with the help of index'''\\r\\n        self.books[index] = value\\r\\n\\r\\n    def __delattr__(self, name):\\r\\n        '''Deletes the named attribute from the object'''\\r\\n        if name == \\\"name\\\":\\r\\n            del self.name\\r\\n\"],\"t\":1707785147546}\n{\"|\":3404,\"_ls\":75,\"_cs\":3404,\"_l\":74,\"_c\":3404,\"u\":0,\"t\":1707785147557}\n{\"t\":1707785157570,\"_#\":\"yCTBma1ywOg+AaMsVJzeM5KILW0=\"}\n{\"|\":54,\"_ls\":75,\"_cs\":3404,\"_l\":1,\"_c\":54,\"u\":0,\"t\":1707785169841}\n{\"u\":1,\"v\":\"\",\"t\":1707785181913}\n{\"|\":0,\"_ls\":76,\"_cs\":3404,\"_l\":75,\"_c\":3404,\"u\":1,\"t\":1707785181933}\n{\"|\":0,\"_ls\":76,\"_cs\":3404,\"_l\":75,\"_c\":3404,\"u\":1,\"t\":1707785199998}\n{\"|\":0,\"_ls\":76,\"_cs\":3404,\"_l\":75,\"_c\":3404,\"u\":1,\"t\":1707785199999}\n{\"u\":1,\"^\":[0,0,\"# Creating objects\\r\\nlibrary1 = Library(\\\"Caldwell Public  Library\\\", [\\\"The Great Gatsby\\\", \\\"Atomic Habits\\\", \\\"The Bible\\\", \\\"Mrs. Spring Fragrance\\\", \\\"Computers in Modern Life\\\"])\\r\\nlibrary2 = Library(\\\"Jennings Library\\\", [\\\"Cultures of America\\\", \\\"Proability and Stats I\\\", \\\"Computers in Modern Life\\\", \\\"Human and Child Psychology\\\", \\\"The Bible\\\"])\"],\"t\":1707785202932}\n{\"|\":333,\"_ls\":78,\"_cs\":3737,\"_l\":77,\"_c\":3737,\"u\":1,\"t\":1707785202941}\n{\"u\":2,\"v\":\"\",\"t\":1707785209154}\n{\"|\":0,\"_ls\":79,\"_cs\":3737,\"_l\":78,\"_c\":3737,\"u\":2,\"t\":1707785209175}\n{\"u\":2,\"v\":\"\",\"t\":1707785212266}\n{\"|\":333,\"_ls\":78,\"_cs\":3737,\"_l\":77,\"_c\":3737,\"u\":1,\"t\":1707785212281}\n{\"u\":2,\"v\":\"\",\"t\":1707785214513}\n{\"|\":0,\"_ls\":79,\"_cs\":3737,\"_l\":78,\"_c\":3737,\"u\":2,\"t\":1707785214526}\n{\"t\":1707785224532,\"_#\":\"Ut5cTh2sO30xyN4kyw77ZUKQ38c=\"}\n{\"|\":0,\"_ls\":79,\"_cs\":3737,\"_l\":78,\"_c\":3737,\"u\":2,\"t\":1707785229323}\n{\"|\":0,\"_ls\":79,\"_cs\":3737,\"_l\":78,\"_c\":3737,\"u\":2,\"t\":1707785229325}\n{\"u\":2,\"^\":[0,0,\"# Showcasing functionality for each methods created for the Class Library\\r\\nprint(library1)                         # __str__\\r\\nprint(repr(library1))                   # __repr__\\r\\nprint(len(library1))                    # __len__\\r\\nprint(bool(library1))                   # __bool__\\r\\n\\r\\nprint(\\\"Atomic Habits\\\" in library1)      # __contains__\\r\\nprint(library1 + library2)              # __add__\\r\\nprint(library2 - library1)              # __sub__\\r\\nlibrary1 += library2                    # __iadd__\\r\\nprint(library1)\\r\\n\\r\\nprint(library1 | library2)              # __or__\\r\\nprint(library1 & library2)              # __and__\\r\\n\\r\\nprint(library1[1])                      # __getitem__\\r\\nlibrary1[1] = \\\"UpdatedBook\\\"             # __setitem__\\r\\nprint(library1[1])\\r\\n\\r\\ndel library1[2]                         # __delitem__\\r\\nprint(library1)\\r\\n\"],\"t\":1707785230842}\n{\"|\":819,\"_ls\":100,\"_cs\":4556,\"_l\":99,\"_c\":4556,\"u\":2,\"t\":1707785230858}\n{\"t\":1707785240862,\"_#\":\"wklZMk0o9vJR2FXOMiZpi3V+bKE=\"}\n{\"|\":819,\"_ls\":100,\"_cs\":4556,\"_l\":99,\"_c\":4556,\"u\":2,\"t\":1707785258838}\n{\"|\":819,\"_ls\":100,\"_cs\":4556,\"_l\":99,\"_c\":4556,\"u\":2,\"t\":1707785258879}\n{\"|\":819,\"_ls\":100,\"_cs\":4556,\"_l\":99,\"_c\":4556,\"u\":2,\"t\":1707785272846}\n{\"|\":301,\"_ls\":100,\"_cs\":4556,\"_l\":84,\"_c\":4038,\"u\":2,\"t\":1707785273639}\n"
      }
    ]
  }
}